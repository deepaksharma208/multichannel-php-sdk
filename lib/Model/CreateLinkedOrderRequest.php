<?php
/**
 * CreateLinkedOrderRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ShiprocketAPI
 *
 * Welcome to ShipRocket’s API Documentation. Get a clear understanding of all the sections and codes that are used in ShipRocket’s API. ShipRocket API uses the JSON syntax.     First you need to register with ShipRocket and create an account. Simply click on this [link](https://app.shiprocket.in/register) to complete the simple sign up process.    Please note that to utilise the ShipRocket API's, you need to [upgrade](https://app.shiprocket.in/billing-plan-details) your plan to Advance or Pro. To get access to use the API's, you need to call to +91-9266623006 our customer care or send a mail to srs@kartrocket.com, stating that you would like to use ShipRocket Open API's. After that you will have to provide an alternate email id which will be used for the ShipRocket API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateLinkedOrderRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateLinkedOrderRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateLinkedOrderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'string',
        'order_date' => 'string',
        'channel_id' => 'int',
        'billing_customer_name' => 'string',
        'billing_last_name' => 'string',
        'billing_address' => 'string',
        'billing_address_2' => 'string',
        'billing_city' => 'string',
        'billing_state' => 'string',
        'billing_country' => 'string',
        'billing_pincode' => 'string',
        'billing_email' => 'string',
        'billing_phone' => 'string',
        'shipping_is_billing' => 'int',
        'shipping_customer_name' => 'string',
        'shipping_last_name' => 'string',
        'shipping_address' => 'string',
        'shipping_address_2' => 'string',
        'shipping_city' => 'string',
        'shipping_country' => 'string',
        'shipping_pincode' => 'string',
        'shipping_state' => 'string',
        'shipping_email' => 'string',
        'shipping_phone' => 'string',
        'order_items' => '\Swagger\Client\Model\CreateLinkedOrderRequestOrderItems[]',
        'payment_method' => 'string',
        'shipping_charges' => 'string',
        'giftwrap_charges' => 'string',
        'transaction_charges' => 'string',
        'total_discount' => 'string',
        'sub_total' => 'int',
        'length' => 'int',
        'breadth' => 'int',
        'height' => 'int',
        'weight' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => null,
        'order_date' => null,
        'channel_id' => 'int32',
        'billing_customer_name' => null,
        'billing_last_name' => null,
        'billing_address' => null,
        'billing_address_2' => null,
        'billing_city' => null,
        'billing_state' => null,
        'billing_country' => null,
        'billing_pincode' => null,
        'billing_email' => null,
        'billing_phone' => null,
        'shipping_is_billing' => 'int32',
        'shipping_customer_name' => null,
        'shipping_last_name' => null,
        'shipping_address' => null,
        'shipping_address_2' => null,
        'shipping_city' => null,
        'shipping_country' => null,
        'shipping_pincode' => null,
        'shipping_state' => null,
        'shipping_email' => null,
        'shipping_phone' => null,
        'order_items' => null,
        'payment_method' => null,
        'shipping_charges' => null,
        'giftwrap_charges' => null,
        'transaction_charges' => null,
        'total_discount' => null,
        'sub_total' => 'int32',
        'length' => null,
        'breadth' => null,
        'height' => null,
        'weight' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
        'order_date' => 'order_date',
        'channel_id' => 'channel_id',
        'billing_customer_name' => 'billing_customer_name',
        'billing_last_name' => 'billing_last_name',
        'billing_address' => 'billing_address',
        'billing_address_2' => 'billing_address_2',
        'billing_city' => 'billing_city',
        'billing_state' => 'billing_state',
        'billing_country' => 'billing_country',
        'billing_pincode' => 'billing_pincode',
        'billing_email' => 'billing_email',
        'billing_phone' => 'billing_phone',
        'shipping_is_billing' => 'shipping_is_billing',
        'shipping_customer_name' => 'shipping_customer_name',
        'shipping_last_name' => 'shipping_last_name',
        'shipping_address' => 'shipping_address',
        'shipping_address_2' => 'shipping_address_2',
        'shipping_city' => 'shipping_city',
        'shipping_country' => 'shipping_country',
        'shipping_pincode' => 'shipping_pincode',
        'shipping_state' => 'shipping_state',
        'shipping_email' => 'shipping_email',
        'shipping_phone' => 'shipping_phone',
        'order_items' => 'order_items',
        'payment_method' => 'payment_method',
        'shipping_charges' => 'shipping_charges',
        'giftwrap_charges' => 'giftwrap_charges',
        'transaction_charges' => 'transaction_charges',
        'total_discount' => 'total_discount',
        'sub_total' => 'sub_total',
        'length' => 'length',
        'breadth' => 'breadth',
        'height' => 'height',
        'weight' => 'weight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'order_date' => 'setOrderDate',
        'channel_id' => 'setChannelId',
        'billing_customer_name' => 'setBillingCustomerName',
        'billing_last_name' => 'setBillingLastName',
        'billing_address' => 'setBillingAddress',
        'billing_address_2' => 'setBillingAddress2',
        'billing_city' => 'setBillingCity',
        'billing_state' => 'setBillingState',
        'billing_country' => 'setBillingCountry',
        'billing_pincode' => 'setBillingPincode',
        'billing_email' => 'setBillingEmail',
        'billing_phone' => 'setBillingPhone',
        'shipping_is_billing' => 'setShippingIsBilling',
        'shipping_customer_name' => 'setShippingCustomerName',
        'shipping_last_name' => 'setShippingLastName',
        'shipping_address' => 'setShippingAddress',
        'shipping_address_2' => 'setShippingAddress2',
        'shipping_city' => 'setShippingCity',
        'shipping_country' => 'setShippingCountry',
        'shipping_pincode' => 'setShippingPincode',
        'shipping_state' => 'setShippingState',
        'shipping_email' => 'setShippingEmail',
        'shipping_phone' => 'setShippingPhone',
        'order_items' => 'setOrderItems',
        'payment_method' => 'setPaymentMethod',
        'shipping_charges' => 'setShippingCharges',
        'giftwrap_charges' => 'setGiftwrapCharges',
        'transaction_charges' => 'setTransactionCharges',
        'total_discount' => 'setTotalDiscount',
        'sub_total' => 'setSubTotal',
        'length' => 'setLength',
        'breadth' => 'setBreadth',
        'height' => 'setHeight',
        'weight' => 'setWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'order_date' => 'getOrderDate',
        'channel_id' => 'getChannelId',
        'billing_customer_name' => 'getBillingCustomerName',
        'billing_last_name' => 'getBillingLastName',
        'billing_address' => 'getBillingAddress',
        'billing_address_2' => 'getBillingAddress2',
        'billing_city' => 'getBillingCity',
        'billing_state' => 'getBillingState',
        'billing_country' => 'getBillingCountry',
        'billing_pincode' => 'getBillingPincode',
        'billing_email' => 'getBillingEmail',
        'billing_phone' => 'getBillingPhone',
        'shipping_is_billing' => 'getShippingIsBilling',
        'shipping_customer_name' => 'getShippingCustomerName',
        'shipping_last_name' => 'getShippingLastName',
        'shipping_address' => 'getShippingAddress',
        'shipping_address_2' => 'getShippingAddress2',
        'shipping_city' => 'getShippingCity',
        'shipping_country' => 'getShippingCountry',
        'shipping_pincode' => 'getShippingPincode',
        'shipping_state' => 'getShippingState',
        'shipping_email' => 'getShippingEmail',
        'shipping_phone' => 'getShippingPhone',
        'order_items' => 'getOrderItems',
        'payment_method' => 'getPaymentMethod',
        'shipping_charges' => 'getShippingCharges',
        'giftwrap_charges' => 'getGiftwrapCharges',
        'transaction_charges' => 'getTransactionCharges',
        'total_discount' => 'getTotalDiscount',
        'sub_total' => 'getSubTotal',
        'length' => 'getLength',
        'breadth' => 'getBreadth',
        'height' => 'getHeight',
        'weight' => 'getWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['billing_customer_name'] = isset($data['billing_customer_name']) ? $data['billing_customer_name'] : null;
        $this->container['billing_last_name'] = isset($data['billing_last_name']) ? $data['billing_last_name'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['billing_address_2'] = isset($data['billing_address_2']) ? $data['billing_address_2'] : null;
        $this->container['billing_city'] = isset($data['billing_city']) ? $data['billing_city'] : null;
        $this->container['billing_state'] = isset($data['billing_state']) ? $data['billing_state'] : null;
        $this->container['billing_country'] = isset($data['billing_country']) ? $data['billing_country'] : null;
        $this->container['billing_pincode'] = isset($data['billing_pincode']) ? $data['billing_pincode'] : null;
        $this->container['billing_email'] = isset($data['billing_email']) ? $data['billing_email'] : null;
        $this->container['billing_phone'] = isset($data['billing_phone']) ? $data['billing_phone'] : null;
        $this->container['shipping_is_billing'] = isset($data['shipping_is_billing']) ? $data['shipping_is_billing'] : null;
        $this->container['shipping_customer_name'] = isset($data['shipping_customer_name']) ? $data['shipping_customer_name'] : null;
        $this->container['shipping_last_name'] = isset($data['shipping_last_name']) ? $data['shipping_last_name'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['shipping_address_2'] = isset($data['shipping_address_2']) ? $data['shipping_address_2'] : null;
        $this->container['shipping_city'] = isset($data['shipping_city']) ? $data['shipping_city'] : null;
        $this->container['shipping_country'] = isset($data['shipping_country']) ? $data['shipping_country'] : null;
        $this->container['shipping_pincode'] = isset($data['shipping_pincode']) ? $data['shipping_pincode'] : null;
        $this->container['shipping_state'] = isset($data['shipping_state']) ? $data['shipping_state'] : null;
        $this->container['shipping_email'] = isset($data['shipping_email']) ? $data['shipping_email'] : null;
        $this->container['shipping_phone'] = isset($data['shipping_phone']) ? $data['shipping_phone'] : null;
        $this->container['order_items'] = isset($data['order_items']) ? $data['order_items'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['shipping_charges'] = isset($data['shipping_charges']) ? $data['shipping_charges'] : null;
        $this->container['giftwrap_charges'] = isset($data['giftwrap_charges']) ? $data['giftwrap_charges'] : null;
        $this->container['transaction_charges'] = isset($data['transaction_charges']) ? $data['transaction_charges'] : null;
        $this->container['total_discount'] = isset($data['total_discount']) ? $data['total_discount'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['breadth'] = isset($data['breadth']) ? $data['breadth'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['order_date'] === null) {
            $invalidProperties[] = "'order_date' can't be null";
        }
        if ($this->container['channel_id'] === null) {
            $invalidProperties[] = "'channel_id' can't be null";
        }
        if ($this->container['billing_customer_name'] === null) {
            $invalidProperties[] = "'billing_customer_name' can't be null";
        }
        if ($this->container['billing_last_name'] === null) {
            $invalidProperties[] = "'billing_last_name' can't be null";
        }
        if ($this->container['billing_address'] === null) {
            $invalidProperties[] = "'billing_address' can't be null";
        }
        if ($this->container['billing_address_2'] === null) {
            $invalidProperties[] = "'billing_address_2' can't be null";
        }
        if ($this->container['billing_city'] === null) {
            $invalidProperties[] = "'billing_city' can't be null";
        }
        if ($this->container['billing_state'] === null) {
            $invalidProperties[] = "'billing_state' can't be null";
        }
        if ($this->container['billing_country'] === null) {
            $invalidProperties[] = "'billing_country' can't be null";
        }
        if ($this->container['billing_pincode'] === null) {
            $invalidProperties[] = "'billing_pincode' can't be null";
        }
        if ($this->container['billing_email'] === null) {
            $invalidProperties[] = "'billing_email' can't be null";
        }
        if ($this->container['billing_phone'] === null) {
            $invalidProperties[] = "'billing_phone' can't be null";
        }
        if ($this->container['shipping_is_billing'] === null) {
            $invalidProperties[] = "'shipping_is_billing' can't be null";
        }
        if ($this->container['shipping_customer_name'] === null) {
            $invalidProperties[] = "'shipping_customer_name' can't be null";
        }
        if ($this->container['shipping_last_name'] === null) {
            $invalidProperties[] = "'shipping_last_name' can't be null";
        }
        if ($this->container['shipping_address'] === null) {
            $invalidProperties[] = "'shipping_address' can't be null";
        }
        if ($this->container['shipping_address_2'] === null) {
            $invalidProperties[] = "'shipping_address_2' can't be null";
        }
        if ($this->container['shipping_city'] === null) {
            $invalidProperties[] = "'shipping_city' can't be null";
        }
        if ($this->container['shipping_country'] === null) {
            $invalidProperties[] = "'shipping_country' can't be null";
        }
        if ($this->container['shipping_pincode'] === null) {
            $invalidProperties[] = "'shipping_pincode' can't be null";
        }
        if ($this->container['shipping_state'] === null) {
            $invalidProperties[] = "'shipping_state' can't be null";
        }
        if ($this->container['shipping_email'] === null) {
            $invalidProperties[] = "'shipping_email' can't be null";
        }
        if ($this->container['shipping_phone'] === null) {
            $invalidProperties[] = "'shipping_phone' can't be null";
        }
        if ($this->container['order_items'] === null) {
            $invalidProperties[] = "'order_items' can't be null";
        }
        if ($this->container['payment_method'] === null) {
            $invalidProperties[] = "'payment_method' can't be null";
        }
        if ($this->container['shipping_charges'] === null) {
            $invalidProperties[] = "'shipping_charges' can't be null";
        }
        if ($this->container['giftwrap_charges'] === null) {
            $invalidProperties[] = "'giftwrap_charges' can't be null";
        }
        if ($this->container['transaction_charges'] === null) {
            $invalidProperties[] = "'transaction_charges' can't be null";
        }
        if ($this->container['total_discount'] === null) {
            $invalidProperties[] = "'total_discount' can't be null";
        }
        if ($this->container['sub_total'] === null) {
            $invalidProperties[] = "'sub_total' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['order_id'] === null) {
            return false;
        }
        if ($this->container['order_date'] === null) {
            return false;
        }
        if ($this->container['channel_id'] === null) {
            return false;
        }
        if ($this->container['billing_customer_name'] === null) {
            return false;
        }
        if ($this->container['billing_last_name'] === null) {
            return false;
        }
        if ($this->container['billing_address'] === null) {
            return false;
        }
        if ($this->container['billing_address_2'] === null) {
            return false;
        }
        if ($this->container['billing_city'] === null) {
            return false;
        }
        if ($this->container['billing_state'] === null) {
            return false;
        }
        if ($this->container['billing_country'] === null) {
            return false;
        }
        if ($this->container['billing_pincode'] === null) {
            return false;
        }
        if ($this->container['billing_email'] === null) {
            return false;
        }
        if ($this->container['billing_phone'] === null) {
            return false;
        }
        if ($this->container['shipping_is_billing'] === null) {
            return false;
        }
        if ($this->container['shipping_customer_name'] === null) {
            return false;
        }
        if ($this->container['shipping_last_name'] === null) {
            return false;
        }
        if ($this->container['shipping_address'] === null) {
            return false;
        }
        if ($this->container['shipping_address_2'] === null) {
            return false;
        }
        if ($this->container['shipping_city'] === null) {
            return false;
        }
        if ($this->container['shipping_country'] === null) {
            return false;
        }
        if ($this->container['shipping_pincode'] === null) {
            return false;
        }
        if ($this->container['shipping_state'] === null) {
            return false;
        }
        if ($this->container['shipping_email'] === null) {
            return false;
        }
        if ($this->container['shipping_phone'] === null) {
            return false;
        }
        if ($this->container['order_items'] === null) {
            return false;
        }
        if ($this->container['payment_method'] === null) {
            return false;
        }
        if ($this->container['shipping_charges'] === null) {
            return false;
        }
        if ($this->container['giftwrap_charges'] === null) {
            return false;
        }
        if ($this->container['transaction_charges'] === null) {
            return false;
        }
        if ($this->container['total_discount'] === null) {
            return false;
        }
        if ($this->container['sub_total'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Creates the order id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return string
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param string $order_date Mentions the date and time when the order was created
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return int
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param int $channel_id The id of the channel where the order is placed
     *
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets billing_customer_name
     *
     * @return string
     */
    public function getBillingCustomerName()
    {
        return $this->container['billing_customer_name'];
    }

    /**
     * Sets billing_customer_name
     *
     * @param string $billing_customer_name The customer’s name
     *
     * @return $this
     */
    public function setBillingCustomerName($billing_customer_name)
    {
        $this->container['billing_customer_name'] = $billing_customer_name;

        return $this;
    }

    /**
     * Gets billing_last_name
     *
     * @return string
     */
    public function getBillingLastName()
    {
        return $this->container['billing_last_name'];
    }

    /**
     * Sets billing_last_name
     *
     * @param string $billing_last_name The customer’s last name
     *
     * @return $this
     */
    public function setBillingLastName($billing_last_name)
    {
        $this->container['billing_last_name'] = $billing_last_name;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return string
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param string $billing_address The first two address lines of the customer
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets billing_address_2
     *
     * @return string
     */
    public function getBillingAddress2()
    {
        return $this->container['billing_address_2'];
    }

    /**
     * Sets billing_address_2
     *
     * @param string $billing_address_2 
     *
     * @return $this
     */
    public function setBillingAddress2($billing_address_2)
    {
        $this->container['billing_address_2'] = $billing_address_2;

        return $this;
    }

    /**
     * Gets billing_city
     *
     * @return string
     */
    public function getBillingCity()
    {
        return $this->container['billing_city'];
    }

    /**
     * Sets billing_city
     *
     * @param string $billing_city Geographical details of the customer’s adress
     *
     * @return $this
     */
    public function setBillingCity($billing_city)
    {
        $this->container['billing_city'] = $billing_city;

        return $this;
    }

    /**
     * Gets billing_state
     *
     * @return string
     */
    public function getBillingState()
    {
        return $this->container['billing_state'];
    }

    /**
     * Sets billing_state
     *
     * @param string $billing_state 
     *
     * @return $this
     */
    public function setBillingState($billing_state)
    {
        $this->container['billing_state'] = $billing_state;

        return $this;
    }

    /**
     * Gets billing_country
     *
     * @return string
     */
    public function getBillingCountry()
    {
        return $this->container['billing_country'];
    }

    /**
     * Sets billing_country
     *
     * @param string $billing_country 
     *
     * @return $this
     */
    public function setBillingCountry($billing_country)
    {
        $this->container['billing_country'] = $billing_country;

        return $this;
    }

    /**
     * Gets billing_pincode
     *
     * @return string
     */
    public function getBillingPincode()
    {
        return $this->container['billing_pincode'];
    }

    /**
     * Sets billing_pincode
     *
     * @param string $billing_pincode Customer’s pincode
     *
     * @return $this
     */
    public function setBillingPincode($billing_pincode)
    {
        $this->container['billing_pincode'] = $billing_pincode;

        return $this;
    }

    /**
     * Gets billing_email
     *
     * @return string
     */
    public function getBillingEmail()
    {
        return $this->container['billing_email'];
    }

    /**
     * Sets billing_email
     *
     * @param string $billing_email Customer’s email id
     *
     * @return $this
     */
    public function setBillingEmail($billing_email)
    {
        $this->container['billing_email'] = $billing_email;

        return $this;
    }

    /**
     * Gets billing_phone
     *
     * @return string
     */
    public function getBillingPhone()
    {
        return $this->container['billing_phone'];
    }

    /**
     * Sets billing_phone
     *
     * @param string $billing_phone Customer’s phone numberThe name of the person to whom the package is being shipped
     *
     * @return $this
     */
    public function setBillingPhone($billing_phone)
    {
        $this->container['billing_phone'] = $billing_phone;

        return $this;
    }

    /**
     * Gets shipping_is_billing
     *
     * @return int
     */
    public function getShippingIsBilling()
    {
        return $this->container['shipping_is_billing'];
    }

    /**
     * Sets shipping_is_billing
     *
     * @param int $shipping_is_billing 
     *
     * @return $this
     */
    public function setShippingIsBilling($shipping_is_billing)
    {
        $this->container['shipping_is_billing'] = $shipping_is_billing;

        return $this;
    }

    /**
     * Gets shipping_customer_name
     *
     * @return string
     */
    public function getShippingCustomerName()
    {
        return $this->container['shipping_customer_name'];
    }

    /**
     * Sets shipping_customer_name
     *
     * @param string $shipping_customer_name The name of the person to whom the package is being shipped
     *
     * @return $this
     */
    public function setShippingCustomerName($shipping_customer_name)
    {
        $this->container['shipping_customer_name'] = $shipping_customer_name;

        return $this;
    }

    /**
     * Gets shipping_last_name
     *
     * @return string
     */
    public function getShippingLastName()
    {
        return $this->container['shipping_last_name'];
    }

    /**
     * Sets shipping_last_name
     *
     * @param string $shipping_last_name 
     *
     * @return $this
     */
    public function setShippingLastName($shipping_last_name)
    {
        $this->container['shipping_last_name'] = $shipping_last_name;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return string
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param string $shipping_address Address of the person to whom the package is being shipped to
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets shipping_address_2
     *
     * @return string
     */
    public function getShippingAddress2()
    {
        return $this->container['shipping_address_2'];
    }

    /**
     * Sets shipping_address_2
     *
     * @param string $shipping_address_2 
     *
     * @return $this
     */
    public function setShippingAddress2($shipping_address_2)
    {
        $this->container['shipping_address_2'] = $shipping_address_2;

        return $this;
    }

    /**
     * Gets shipping_city
     *
     * @return string
     */
    public function getShippingCity()
    {
        return $this->container['shipping_city'];
    }

    /**
     * Sets shipping_city
     *
     * @param string $shipping_city 
     *
     * @return $this
     */
    public function setShippingCity($shipping_city)
    {
        $this->container['shipping_city'] = $shipping_city;

        return $this;
    }

    /**
     * Gets shipping_country
     *
     * @return string
     */
    public function getShippingCountry()
    {
        return $this->container['shipping_country'];
    }

    /**
     * Sets shipping_country
     *
     * @param string $shipping_country 
     *
     * @return $this
     */
    public function setShippingCountry($shipping_country)
    {
        $this->container['shipping_country'] = $shipping_country;

        return $this;
    }

    /**
     * Gets shipping_pincode
     *
     * @return string
     */
    public function getShippingPincode()
    {
        return $this->container['shipping_pincode'];
    }

    /**
     * Sets shipping_pincode
     *
     * @param string $shipping_pincode 
     *
     * @return $this
     */
    public function setShippingPincode($shipping_pincode)
    {
        $this->container['shipping_pincode'] = $shipping_pincode;

        return $this;
    }

    /**
     * Gets shipping_state
     *
     * @return string
     */
    public function getShippingState()
    {
        return $this->container['shipping_state'];
    }

    /**
     * Sets shipping_state
     *
     * @param string $shipping_state 
     *
     * @return $this
     */
    public function setShippingState($shipping_state)
    {
        $this->container['shipping_state'] = $shipping_state;

        return $this;
    }

    /**
     * Gets shipping_email
     *
     * @return string
     */
    public function getShippingEmail()
    {
        return $this->container['shipping_email'];
    }

    /**
     * Sets shipping_email
     *
     * @param string $shipping_email Email id of the person whom the package is being shipped to
     *
     * @return $this
     */
    public function setShippingEmail($shipping_email)
    {
        $this->container['shipping_email'] = $shipping_email;

        return $this;
    }

    /**
     * Gets shipping_phone
     *
     * @return string
     */
    public function getShippingPhone()
    {
        return $this->container['shipping_phone'];
    }

    /**
     * Sets shipping_phone
     *
     * @param string $shipping_phone Phone number of the person whom the package is being shipped to
     *
     * @return $this
     */
    public function setShippingPhone($shipping_phone)
    {
        $this->container['shipping_phone'] = $shipping_phone;

        return $this;
    }

    /**
     * Gets order_items
     *
     * @return \Swagger\Client\Model\CreateLinkedOrderRequestOrderItems[]
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     *
     * @param \Swagger\Client\Model\CreateLinkedOrderRequestOrderItems[] $order_items order_items
     *
     * @return $this
     */
    public function setOrderItems($order_items)
    {
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method Specifies the payment method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets shipping_charges
     *
     * @return string
     */
    public function getShippingCharges()
    {
        return $this->container['shipping_charges'];
    }

    /**
     * Sets shipping_charges
     *
     * @param string $shipping_charges Mentions the shipping charges
     *
     * @return $this
     */
    public function setShippingCharges($shipping_charges)
    {
        $this->container['shipping_charges'] = $shipping_charges;

        return $this;
    }

    /**
     * Gets giftwrap_charges
     *
     * @return string
     */
    public function getGiftwrapCharges()
    {
        return $this->container['giftwrap_charges'];
    }

    /**
     * Sets giftwrap_charges
     *
     * @param string $giftwrap_charges Mentions the charges for giftwrapping
     *
     * @return $this
     */
    public function setGiftwrapCharges($giftwrap_charges)
    {
        $this->container['giftwrap_charges'] = $giftwrap_charges;

        return $this;
    }

    /**
     * Gets transaction_charges
     *
     * @return string
     */
    public function getTransactionCharges()
    {
        return $this->container['transaction_charges'];
    }

    /**
     * Sets transaction_charges
     *
     * @param string $transaction_charges Mentions the charges for the total transaction
     *
     * @return $this
     */
    public function setTransactionCharges($transaction_charges)
    {
        $this->container['transaction_charges'] = $transaction_charges;

        return $this;
    }

    /**
     * Gets total_discount
     *
     * @return string
     */
    public function getTotalDiscount()
    {
        return $this->container['total_discount'];
    }

    /**
     * Sets total_discount
     *
     * @param string $total_discount Mentions the total discount offered
     *
     * @return $this
     */
    public function setTotalDiscount($total_discount)
    {
        $this->container['total_discount'] = $total_discount;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return int
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param int $sub_total Mentions the total after these deductions
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int $length Mentions the product dimensions
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets breadth
     *
     * @return int
     */
    public function getBreadth()
    {
        return $this->container['breadth'];
    }

    /**
     * Sets breadth
     *
     * @param int $breadth 
     *
     * @return $this
     */
    public function setBreadth($breadth)
    {
        $this->container['breadth'] = $breadth;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height 
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight 
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


