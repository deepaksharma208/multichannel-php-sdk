<?php
/**
 * GetOrderResponseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ShiprocketAPI
 *
 * Welcome to ShipRocket’s API Documentation. Get a clear understanding of all the sections and codes that are used in ShipRocket’s API. ShipRocket API uses the JSON syntax.     First you need to register with ShipRocket and create an account. Simply click on this [link](https://app.shiprocket.in/register) to complete the simple sign up process.    Please note that to utilise the ShipRocket API's, you need to [upgrade](https://app.shiprocket.in/billing-plan-details) your plan to Advance or Pro. To get access to use the API's, you need to call to +91-9266623006 our customer care or send a mail to srs@kartrocket.com, stating that you would like to use ShipRocket Open API's. After that you will have to provide an alternate email id which will be used for the ShipRocket API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetOrderResponseData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetOrderResponseData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetOrderResponse_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'channel_id' => 'int',
        'channel_name' => 'string',
        'base_channel_code' => 'string',
        'channel_order_id' => 'string',
        'customer_name' => 'string',
        'customer_email' => 'string',
        'customer_phone' => 'string',
        'payment_status' => 'string',
        'total' => 'string',
        'tax' => 'string',
        'sla' => 'string',
        'shipping_method' => 'string',
        'expedited' => 'string',
        'status' => 'string',
        'status_code' => 'int',
        'payment_method' => 'string',
        'is_international' => 'int',
        'purpose_of_shipment' => 'int',
        'channel_created_at' => 'string',
        'created_at' => 'string',
        'products' => '\Swagger\Client\Model\GetOrderResponseDataProducts[]',
        'shipments' => '\Swagger\Client\Model\GetOrderResponseDataShipments[]',
        'activities' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'channel_id' => null,
        'channel_name' => null,
        'base_channel_code' => null,
        'channel_order_id' => null,
        'customer_name' => null,
        'customer_email' => null,
        'customer_phone' => null,
        'payment_status' => null,
        'total' => null,
        'tax' => null,
        'sla' => null,
        'shipping_method' => null,
        'expedited' => null,
        'status' => null,
        'status_code' => null,
        'payment_method' => null,
        'is_international' => null,
        'purpose_of_shipment' => null,
        'channel_created_at' => null,
        'created_at' => null,
        'products' => null,
        'shipments' => null,
        'activities' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'channel_id' => 'channel_id',
        'channel_name' => 'channel_name',
        'base_channel_code' => 'base_channel_code',
        'channel_order_id' => 'channel_order_id',
        'customer_name' => 'customer_name',
        'customer_email' => 'customer_email',
        'customer_phone' => 'customer_phone',
        'payment_status' => 'payment_status',
        'total' => 'total',
        'tax' => 'tax',
        'sla' => 'sla',
        'shipping_method' => 'shipping_method',
        'expedited' => 'expedited',
        'status' => 'status',
        'status_code' => 'status_code',
        'payment_method' => 'payment_method',
        'is_international' => 'is_international',
        'purpose_of_shipment' => 'purpose_of_shipment',
        'channel_created_at' => 'channel_created_at',
        'created_at' => 'created_at',
        'products' => 'products',
        'shipments' => 'shipments',
        'activities' => 'activities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'channel_id' => 'setChannelId',
        'channel_name' => 'setChannelName',
        'base_channel_code' => 'setBaseChannelCode',
        'channel_order_id' => 'setChannelOrderId',
        'customer_name' => 'setCustomerName',
        'customer_email' => 'setCustomerEmail',
        'customer_phone' => 'setCustomerPhone',
        'payment_status' => 'setPaymentStatus',
        'total' => 'setTotal',
        'tax' => 'setTax',
        'sla' => 'setSla',
        'shipping_method' => 'setShippingMethod',
        'expedited' => 'setExpedited',
        'status' => 'setStatus',
        'status_code' => 'setStatusCode',
        'payment_method' => 'setPaymentMethod',
        'is_international' => 'setIsInternational',
        'purpose_of_shipment' => 'setPurposeOfShipment',
        'channel_created_at' => 'setChannelCreatedAt',
        'created_at' => 'setCreatedAt',
        'products' => 'setProducts',
        'shipments' => 'setShipments',
        'activities' => 'setActivities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'channel_id' => 'getChannelId',
        'channel_name' => 'getChannelName',
        'base_channel_code' => 'getBaseChannelCode',
        'channel_order_id' => 'getChannelOrderId',
        'customer_name' => 'getCustomerName',
        'customer_email' => 'getCustomerEmail',
        'customer_phone' => 'getCustomerPhone',
        'payment_status' => 'getPaymentStatus',
        'total' => 'getTotal',
        'tax' => 'getTax',
        'sla' => 'getSla',
        'shipping_method' => 'getShippingMethod',
        'expedited' => 'getExpedited',
        'status' => 'getStatus',
        'status_code' => 'getStatusCode',
        'payment_method' => 'getPaymentMethod',
        'is_international' => 'getIsInternational',
        'purpose_of_shipment' => 'getPurposeOfShipment',
        'channel_created_at' => 'getChannelCreatedAt',
        'created_at' => 'getCreatedAt',
        'products' => 'getProducts',
        'shipments' => 'getShipments',
        'activities' => 'getActivities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['channel_name'] = isset($data['channel_name']) ? $data['channel_name'] : null;
        $this->container['base_channel_code'] = isset($data['base_channel_code']) ? $data['base_channel_code'] : null;
        $this->container['channel_order_id'] = isset($data['channel_order_id']) ? $data['channel_order_id'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['customer_email'] = isset($data['customer_email']) ? $data['customer_email'] : null;
        $this->container['customer_phone'] = isset($data['customer_phone']) ? $data['customer_phone'] : null;
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['sla'] = isset($data['sla']) ? $data['sla'] : null;
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['expedited'] = isset($data['expedited']) ? $data['expedited'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['is_international'] = isset($data['is_international']) ? $data['is_international'] : null;
        $this->container['purpose_of_shipment'] = isset($data['purpose_of_shipment']) ? $data['purpose_of_shipment'] : null;
        $this->container['channel_created_at'] = isset($data['channel_created_at']) ? $data['channel_created_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['shipments'] = isset($data['shipments']) ? $data['shipments'] : null;
        $this->container['activities'] = isset($data['activities']) ? $data['activities'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return int
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param int $channel_id channel_id
     *
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets channel_name
     *
     * @return string
     */
    public function getChannelName()
    {
        return $this->container['channel_name'];
    }

    /**
     * Sets channel_name
     *
     * @param string $channel_name channel_name
     *
     * @return $this
     */
    public function setChannelName($channel_name)
    {
        $this->container['channel_name'] = $channel_name;

        return $this;
    }

    /**
     * Gets base_channel_code
     *
     * @return string
     */
    public function getBaseChannelCode()
    {
        return $this->container['base_channel_code'];
    }

    /**
     * Sets base_channel_code
     *
     * @param string $base_channel_code base_channel_code
     *
     * @return $this
     */
    public function setBaseChannelCode($base_channel_code)
    {
        $this->container['base_channel_code'] = $base_channel_code;

        return $this;
    }

    /**
     * Gets channel_order_id
     *
     * @return string
     */
    public function getChannelOrderId()
    {
        return $this->container['channel_order_id'];
    }

    /**
     * Sets channel_order_id
     *
     * @param string $channel_order_id channel_order_id
     *
     * @return $this
     */
    public function setChannelOrderId($channel_order_id)
    {
        $this->container['channel_order_id'] = $channel_order_id;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string $customer_email customer_email
     *
     * @return $this
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_phone
     *
     * @return string
     */
    public function getCustomerPhone()
    {
        return $this->container['customer_phone'];
    }

    /**
     * Sets customer_phone
     *
     * @param string $customer_phone customer_phone
     *
     * @return $this
     */
    public function setCustomerPhone($customer_phone)
    {
        $this->container['customer_phone'] = $customer_phone;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status payment_status
     *
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets sla
     *
     * @return string
     */
    public function getSla()
    {
        return $this->container['sla'];
    }

    /**
     * Sets sla
     *
     * @param string $sla sla
     *
     * @return $this
     */
    public function setSla($sla)
    {
        $this->container['sla'] = $sla;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string $shipping_method shipping_method
     *
     * @return $this
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets expedited
     *
     * @return string
     */
    public function getExpedited()
    {
        return $this->container['expedited'];
    }

    /**
     * Sets expedited
     *
     * @param string $expedited expedited
     *
     * @return $this
     */
    public function setExpedited($expedited)
    {
        $this->container['expedited'] = $expedited;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return int
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param int $status_code status_code
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets is_international
     *
     * @return int
     */
    public function getIsInternational()
    {
        return $this->container['is_international'];
    }

    /**
     * Sets is_international
     *
     * @param int $is_international is_international
     *
     * @return $this
     */
    public function setIsInternational($is_international)
    {
        $this->container['is_international'] = $is_international;

        return $this;
    }

    /**
     * Gets purpose_of_shipment
     *
     * @return int
     */
    public function getPurposeOfShipment()
    {
        return $this->container['purpose_of_shipment'];
    }

    /**
     * Sets purpose_of_shipment
     *
     * @param int $purpose_of_shipment purpose_of_shipment
     *
     * @return $this
     */
    public function setPurposeOfShipment($purpose_of_shipment)
    {
        $this->container['purpose_of_shipment'] = $purpose_of_shipment;

        return $this;
    }

    /**
     * Gets channel_created_at
     *
     * @return string
     */
    public function getChannelCreatedAt()
    {
        return $this->container['channel_created_at'];
    }

    /**
     * Sets channel_created_at
     *
     * @param string $channel_created_at channel_created_at
     *
     * @return $this
     */
    public function setChannelCreatedAt($channel_created_at)
    {
        $this->container['channel_created_at'] = $channel_created_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \Swagger\Client\Model\GetOrderResponseDataProducts[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \Swagger\Client\Model\GetOrderResponseDataProducts[] $products products
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets shipments
     *
     * @return \Swagger\Client\Model\GetOrderResponseDataShipments[]
     */
    public function getShipments()
    {
        return $this->container['shipments'];
    }

    /**
     * Sets shipments
     *
     * @param \Swagger\Client\Model\GetOrderResponseDataShipments[] $shipments shipments
     *
     * @return $this
     */
    public function setShipments($shipments)
    {
        $this->container['shipments'] = $shipments;

        return $this;
    }

    /**
     * Gets activities
     *
     * @return string[]
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     *
     * @param string[] $activities activities
     *
     * @return $this
     */
    public function setActivities($activities)
    {
        $this->container['activities'] = $activities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


