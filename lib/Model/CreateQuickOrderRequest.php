<?php
/**
 * CreateQuickOrderRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ShiprocketAPI
 *
 * Welcome to ShipRocket’s API Documentation. Get a clear understanding of all the sections and codes that are used in ShipRocket’s API. ShipRocket API uses the JSON syntax.     First you need to register with ShipRocket and create an account. Simply click on this [link](https://app.shiprocket.in/register) to complete the simple sign up process.    Please note that to utilise the ShipRocket API's, you need to [upgrade](https://app.shiprocket.in/billing-plan-details) your plan to Advance or Pro. To get access to use the API's, you need to call to +91-9266623006 our customer care or send a mail to srs@kartrocket.com, stating that you would like to use ShipRocket Open API's. After that you will have to provide an alternate email id which will be used for the ShipRocket API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateQuickOrderRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateQuickOrderRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateQuickOrderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'string',
        'order_date' => 'string',
        'pickup_code' => 'string',
        'pickup_location' => 'string',
        'pickup_location_id' => 'int',
        'channel_id' => 'int',
        'billing_customer_name' => 'string',
        'billing_last_name' => 'string',
        'billing_address' => 'string',
        'billing_address_2' => 'string',
        'billing_city' => 'string',
        'billing_pincode' => 'int',
        'billing_state' => 'string',
        'billing_country' => 'string',
        'billing_email' => 'string',
        'shipping_is_billing' => 'bool',
        'shipping_customer_name' => 'string',
        'shipping_last_name' => 'string',
        'shipping_address' => 'string',
        'shipping_address_2' => 'string',
        'shipping_city' => 'string',
        'shipping_pincode' => 'int',
        'shipping_country' => 'string',
        'shipping_state' => 'string',
        'shipping_email' => 'string',
        'order_items' => '\Swagger\Client\Model\CreateQuickOrderRequestOrderItems[]',
        'payment_method' => 'string',
        'shipping_charges' => 'int',
        'giftwrap_charges' => 'int',
        'transaction_charges' => 'int',
        'total_discount' => 'int',
        'sub_total' => 'int',
        'length' => 'string',
        'breadth' => 'int',
        'height' => 'int',
        'weight' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => null,
        'order_date' => null,
        'pickup_code' => null,
        'pickup_location' => null,
        'pickup_location_id' => null,
        'channel_id' => null,
        'billing_customer_name' => null,
        'billing_last_name' => null,
        'billing_address' => null,
        'billing_address_2' => null,
        'billing_city' => null,
        'billing_pincode' => null,
        'billing_state' => null,
        'billing_country' => null,
        'billing_email' => null,
        'shipping_is_billing' => null,
        'shipping_customer_name' => null,
        'shipping_last_name' => null,
        'shipping_address' => null,
        'shipping_address_2' => null,
        'shipping_city' => null,
        'shipping_pincode' => null,
        'shipping_country' => null,
        'shipping_state' => null,
        'shipping_email' => null,
        'order_items' => null,
        'payment_method' => null,
        'shipping_charges' => null,
        'giftwrap_charges' => null,
        'transaction_charges' => null,
        'total_discount' => null,
        'sub_total' => null,
        'length' => null,
        'breadth' => null,
        'height' => null,
        'weight' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
        'order_date' => 'order_date',
        'pickup_code' => 'pickup_code',
        'pickup_location' => 'pickup_location',
        'pickup_location_id' => 'pickup_location_id',
        'channel_id' => 'channel_id',
        'billing_customer_name' => 'billing_customer_name',
        'billing_last_name' => 'billing_last_name',
        'billing_address' => 'billing_address',
        'billing_address_2' => 'billing_address_2',
        'billing_city' => 'billing_city',
        'billing_pincode' => 'billing_pincode',
        'billing_state' => 'billing_state',
        'billing_country' => 'billing_country',
        'billing_email' => 'billing_email',
        'shipping_is_billing' => 'shipping_is_billing',
        'shipping_customer_name' => 'shipping_customer_name',
        'shipping_last_name' => 'shipping_last_name',
        'shipping_address' => 'shipping_address',
        'shipping_address_2' => 'shipping_address_2',
        'shipping_city' => 'shipping_city',
        'shipping_pincode' => 'shipping_pincode',
        'shipping_country' => 'shipping_country',
        'shipping_state' => 'shipping_state',
        'shipping_email' => 'shipping_email',
        'order_items' => 'order_items',
        'payment_method' => 'payment_method',
        'shipping_charges' => 'shipping_charges',
        'giftwrap_charges' => 'giftwrap_charges',
        'transaction_charges' => 'transaction_charges',
        'total_discount' => 'total_discount',
        'sub_total' => 'sub_total',
        'length' => 'length',
        'breadth' => 'breadth',
        'height' => 'height',
        'weight' => 'weight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'order_date' => 'setOrderDate',
        'pickup_code' => 'setPickupCode',
        'pickup_location' => 'setPickupLocation',
        'pickup_location_id' => 'setPickupLocationId',
        'channel_id' => 'setChannelId',
        'billing_customer_name' => 'setBillingCustomerName',
        'billing_last_name' => 'setBillingLastName',
        'billing_address' => 'setBillingAddress',
        'billing_address_2' => 'setBillingAddress2',
        'billing_city' => 'setBillingCity',
        'billing_pincode' => 'setBillingPincode',
        'billing_state' => 'setBillingState',
        'billing_country' => 'setBillingCountry',
        'billing_email' => 'setBillingEmail',
        'shipping_is_billing' => 'setShippingIsBilling',
        'shipping_customer_name' => 'setShippingCustomerName',
        'shipping_last_name' => 'setShippingLastName',
        'shipping_address' => 'setShippingAddress',
        'shipping_address_2' => 'setShippingAddress2',
        'shipping_city' => 'setShippingCity',
        'shipping_pincode' => 'setShippingPincode',
        'shipping_country' => 'setShippingCountry',
        'shipping_state' => 'setShippingState',
        'shipping_email' => 'setShippingEmail',
        'order_items' => 'setOrderItems',
        'payment_method' => 'setPaymentMethod',
        'shipping_charges' => 'setShippingCharges',
        'giftwrap_charges' => 'setGiftwrapCharges',
        'transaction_charges' => 'setTransactionCharges',
        'total_discount' => 'setTotalDiscount',
        'sub_total' => 'setSubTotal',
        'length' => 'setLength',
        'breadth' => 'setBreadth',
        'height' => 'setHeight',
        'weight' => 'setWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'order_date' => 'getOrderDate',
        'pickup_code' => 'getPickupCode',
        'pickup_location' => 'getPickupLocation',
        'pickup_location_id' => 'getPickupLocationId',
        'channel_id' => 'getChannelId',
        'billing_customer_name' => 'getBillingCustomerName',
        'billing_last_name' => 'getBillingLastName',
        'billing_address' => 'getBillingAddress',
        'billing_address_2' => 'getBillingAddress2',
        'billing_city' => 'getBillingCity',
        'billing_pincode' => 'getBillingPincode',
        'billing_state' => 'getBillingState',
        'billing_country' => 'getBillingCountry',
        'billing_email' => 'getBillingEmail',
        'shipping_is_billing' => 'getShippingIsBilling',
        'shipping_customer_name' => 'getShippingCustomerName',
        'shipping_last_name' => 'getShippingLastName',
        'shipping_address' => 'getShippingAddress',
        'shipping_address_2' => 'getShippingAddress2',
        'shipping_city' => 'getShippingCity',
        'shipping_pincode' => 'getShippingPincode',
        'shipping_country' => 'getShippingCountry',
        'shipping_state' => 'getShippingState',
        'shipping_email' => 'getShippingEmail',
        'order_items' => 'getOrderItems',
        'payment_method' => 'getPaymentMethod',
        'shipping_charges' => 'getShippingCharges',
        'giftwrap_charges' => 'getGiftwrapCharges',
        'transaction_charges' => 'getTransactionCharges',
        'total_discount' => 'getTotalDiscount',
        'sub_total' => 'getSubTotal',
        'length' => 'getLength',
        'breadth' => 'getBreadth',
        'height' => 'getHeight',
        'weight' => 'getWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['pickup_code'] = isset($data['pickup_code']) ? $data['pickup_code'] : null;
        $this->container['pickup_location'] = isset($data['pickup_location']) ? $data['pickup_location'] : null;
        $this->container['pickup_location_id'] = isset($data['pickup_location_id']) ? $data['pickup_location_id'] : null;
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['billing_customer_name'] = isset($data['billing_customer_name']) ? $data['billing_customer_name'] : null;
        $this->container['billing_last_name'] = isset($data['billing_last_name']) ? $data['billing_last_name'] : null;
        $this->container['billing_address'] = isset($data['billing_address']) ? $data['billing_address'] : null;
        $this->container['billing_address_2'] = isset($data['billing_address_2']) ? $data['billing_address_2'] : null;
        $this->container['billing_city'] = isset($data['billing_city']) ? $data['billing_city'] : null;
        $this->container['billing_pincode'] = isset($data['billing_pincode']) ? $data['billing_pincode'] : null;
        $this->container['billing_state'] = isset($data['billing_state']) ? $data['billing_state'] : null;
        $this->container['billing_country'] = isset($data['billing_country']) ? $data['billing_country'] : null;
        $this->container['billing_email'] = isset($data['billing_email']) ? $data['billing_email'] : null;
        $this->container['shipping_is_billing'] = isset($data['shipping_is_billing']) ? $data['shipping_is_billing'] : null;
        $this->container['shipping_customer_name'] = isset($data['shipping_customer_name']) ? $data['shipping_customer_name'] : null;
        $this->container['shipping_last_name'] = isset($data['shipping_last_name']) ? $data['shipping_last_name'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['shipping_address_2'] = isset($data['shipping_address_2']) ? $data['shipping_address_2'] : null;
        $this->container['shipping_city'] = isset($data['shipping_city']) ? $data['shipping_city'] : null;
        $this->container['shipping_pincode'] = isset($data['shipping_pincode']) ? $data['shipping_pincode'] : null;
        $this->container['shipping_country'] = isset($data['shipping_country']) ? $data['shipping_country'] : null;
        $this->container['shipping_state'] = isset($data['shipping_state']) ? $data['shipping_state'] : null;
        $this->container['shipping_email'] = isset($data['shipping_email']) ? $data['shipping_email'] : null;
        $this->container['order_items'] = isset($data['order_items']) ? $data['order_items'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['shipping_charges'] = isset($data['shipping_charges']) ? $data['shipping_charges'] : null;
        $this->container['giftwrap_charges'] = isset($data['giftwrap_charges']) ? $data['giftwrap_charges'] : null;
        $this->container['transaction_charges'] = isset($data['transaction_charges']) ? $data['transaction_charges'] : null;
        $this->container['total_discount'] = isset($data['total_discount']) ? $data['total_discount'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['breadth'] = isset($data['breadth']) ? $data['breadth'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id required|max:20
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return string
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param string $order_date required
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets pickup_code
     *
     * @return string
     */
    public function getPickupCode()
    {
        return $this->container['pickup_code'];
    }

    /**
     * Sets pickup_code
     *
     * @param string $pickup_code max:10
     *
     * @return $this
     */
    public function setPickupCode($pickup_code)
    {
        $this->container['pickup_code'] = $pickup_code;

        return $this;
    }

    /**
     * Gets pickup_location
     *
     * @return string
     */
    public function getPickupLocation()
    {
        return $this->container['pickup_location'];
    }

    /**
     * Sets pickup_location
     *
     * @param string $pickup_location 
     *
     * @return $this
     */
    public function setPickupLocation($pickup_location)
    {
        $this->container['pickup_location'] = $pickup_location;

        return $this;
    }

    /**
     * Gets pickup_location_id
     *
     * @return int
     */
    public function getPickupLocationId()
    {
        return $this->container['pickup_location_id'];
    }

    /**
     * Sets pickup_location_id
     *
     * @param int $pickup_location_id 
     *
     * @return $this
     */
    public function setPickupLocationId($pickup_location_id)
    {
        $this->container['pickup_location_id'] = $pickup_location_id;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return int
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param int $channel_id 
     *
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets billing_customer_name
     *
     * @return string
     */
    public function getBillingCustomerName()
    {
        return $this->container['billing_customer_name'];
    }

    /**
     * Sets billing_customer_name
     *
     * @param string $billing_customer_name required
     *
     * @return $this
     */
    public function setBillingCustomerName($billing_customer_name)
    {
        $this->container['billing_customer_name'] = $billing_customer_name;

        return $this;
    }

    /**
     * Gets billing_last_name
     *
     * @return string
     */
    public function getBillingLastName()
    {
        return $this->container['billing_last_name'];
    }

    /**
     * Sets billing_last_name
     *
     * @param string $billing_last_name 
     *
     * @return $this
     */
    public function setBillingLastName($billing_last_name)
    {
        $this->container['billing_last_name'] = $billing_last_name;

        return $this;
    }

    /**
     * Gets billing_address
     *
     * @return string
     */
    public function getBillingAddress()
    {
        return $this->container['billing_address'];
    }

    /**
     * Sets billing_address
     *
     * @param string $billing_address required|min:3
     *
     * @return $this
     */
    public function setBillingAddress($billing_address)
    {
        $this->container['billing_address'] = $billing_address;

        return $this;
    }

    /**
     * Gets billing_address_2
     *
     * @return string
     */
    public function getBillingAddress2()
    {
        return $this->container['billing_address_2'];
    }

    /**
     * Sets billing_address_2
     *
     * @param string $billing_address_2 max:50
     *
     * @return $this
     */
    public function setBillingAddress2($billing_address_2)
    {
        $this->container['billing_address_2'] = $billing_address_2;

        return $this;
    }

    /**
     * Gets billing_city
     *
     * @return string
     */
    public function getBillingCity()
    {
        return $this->container['billing_city'];
    }

    /**
     * Sets billing_city
     *
     * @param string $billing_city required|max:30
     *
     * @return $this
     */
    public function setBillingCity($billing_city)
    {
        $this->container['billing_city'] = $billing_city;

        return $this;
    }

    /**
     * Gets billing_pincode
     *
     * @return int
     */
    public function getBillingPincode()
    {
        return $this->container['billing_pincode'];
    }

    /**
     * Sets billing_pincode
     *
     * @param int $billing_pincode 
     *
     * @return $this
     */
    public function setBillingPincode($billing_pincode)
    {
        $this->container['billing_pincode'] = $billing_pincode;

        return $this;
    }

    /**
     * Gets billing_state
     *
     * @return string
     */
    public function getBillingState()
    {
        return $this->container['billing_state'];
    }

    /**
     * Sets billing_state
     *
     * @param string $billing_state required
     *
     * @return $this
     */
    public function setBillingState($billing_state)
    {
        $this->container['billing_state'] = $billing_state;

        return $this;
    }

    /**
     * Gets billing_country
     *
     * @return string
     */
    public function getBillingCountry()
    {
        return $this->container['billing_country'];
    }

    /**
     * Sets billing_country
     *
     * @param string $billing_country required
     *
     * @return $this
     */
    public function setBillingCountry($billing_country)
    {
        $this->container['billing_country'] = $billing_country;

        return $this;
    }

    /**
     * Gets billing_email
     *
     * @return string
     */
    public function getBillingEmail()
    {
        return $this->container['billing_email'];
    }

    /**
     * Sets billing_email
     *
     * @param string $billing_email required
     *
     * @return $this
     */
    public function setBillingEmail($billing_email)
    {
        $this->container['billing_email'] = $billing_email;

        return $this;
    }

    /**
     * Gets shipping_is_billing
     *
     * @return bool
     */
    public function getShippingIsBilling()
    {
        return $this->container['shipping_is_billing'];
    }

    /**
     * Sets shipping_is_billing
     *
     * @param bool $shipping_is_billing required
     *
     * @return $this
     */
    public function setShippingIsBilling($shipping_is_billing)
    {
        $this->container['shipping_is_billing'] = $shipping_is_billing;

        return $this;
    }

    /**
     * Gets shipping_customer_name
     *
     * @return string
     */
    public function getShippingCustomerName()
    {
        return $this->container['shipping_customer_name'];
    }

    /**
     * Sets shipping_customer_name
     *
     * @param string $shipping_customer_name 
     *
     * @return $this
     */
    public function setShippingCustomerName($shipping_customer_name)
    {
        $this->container['shipping_customer_name'] = $shipping_customer_name;

        return $this;
    }

    /**
     * Gets shipping_last_name
     *
     * @return string
     */
    public function getShippingLastName()
    {
        return $this->container['shipping_last_name'];
    }

    /**
     * Sets shipping_last_name
     *
     * @param string $shipping_last_name 
     *
     * @return $this
     */
    public function setShippingLastName($shipping_last_name)
    {
        $this->container['shipping_last_name'] = $shipping_last_name;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return string
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param string $shipping_address 
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets shipping_address_2
     *
     * @return string
     */
    public function getShippingAddress2()
    {
        return $this->container['shipping_address_2'];
    }

    /**
     * Sets shipping_address_2
     *
     * @param string $shipping_address_2 
     *
     * @return $this
     */
    public function setShippingAddress2($shipping_address_2)
    {
        $this->container['shipping_address_2'] = $shipping_address_2;

        return $this;
    }

    /**
     * Gets shipping_city
     *
     * @return string
     */
    public function getShippingCity()
    {
        return $this->container['shipping_city'];
    }

    /**
     * Sets shipping_city
     *
     * @param string $shipping_city 
     *
     * @return $this
     */
    public function setShippingCity($shipping_city)
    {
        $this->container['shipping_city'] = $shipping_city;

        return $this;
    }

    /**
     * Gets shipping_pincode
     *
     * @return int
     */
    public function getShippingPincode()
    {
        return $this->container['shipping_pincode'];
    }

    /**
     * Sets shipping_pincode
     *
     * @param int $shipping_pincode 
     *
     * @return $this
     */
    public function setShippingPincode($shipping_pincode)
    {
        $this->container['shipping_pincode'] = $shipping_pincode;

        return $this;
    }

    /**
     * Gets shipping_country
     *
     * @return string
     */
    public function getShippingCountry()
    {
        return $this->container['shipping_country'];
    }

    /**
     * Sets shipping_country
     *
     * @param string $shipping_country 
     *
     * @return $this
     */
    public function setShippingCountry($shipping_country)
    {
        $this->container['shipping_country'] = $shipping_country;

        return $this;
    }

    /**
     * Gets shipping_state
     *
     * @return string
     */
    public function getShippingState()
    {
        return $this->container['shipping_state'];
    }

    /**
     * Sets shipping_state
     *
     * @param string $shipping_state 
     *
     * @return $this
     */
    public function setShippingState($shipping_state)
    {
        $this->container['shipping_state'] = $shipping_state;

        return $this;
    }

    /**
     * Gets shipping_email
     *
     * @return string
     */
    public function getShippingEmail()
    {
        return $this->container['shipping_email'];
    }

    /**
     * Sets shipping_email
     *
     * @param string $shipping_email 
     *
     * @return $this
     */
    public function setShippingEmail($shipping_email)
    {
        $this->container['shipping_email'] = $shipping_email;

        return $this;
    }

    /**
     * Gets order_items
     *
     * @return \Swagger\Client\Model\CreateQuickOrderRequestOrderItems[]
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     *
     * @param \Swagger\Client\Model\CreateQuickOrderRequestOrderItems[] $order_items order_items
     *
     * @return $this
     */
    public function setOrderItems($order_items)
    {
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method required
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets shipping_charges
     *
     * @return int
     */
    public function getShippingCharges()
    {
        return $this->container['shipping_charges'];
    }

    /**
     * Sets shipping_charges
     *
     * @param int $shipping_charges 
     *
     * @return $this
     */
    public function setShippingCharges($shipping_charges)
    {
        $this->container['shipping_charges'] = $shipping_charges;

        return $this;
    }

    /**
     * Gets giftwrap_charges
     *
     * @return int
     */
    public function getGiftwrapCharges()
    {
        return $this->container['giftwrap_charges'];
    }

    /**
     * Sets giftwrap_charges
     *
     * @param int $giftwrap_charges 
     *
     * @return $this
     */
    public function setGiftwrapCharges($giftwrap_charges)
    {
        $this->container['giftwrap_charges'] = $giftwrap_charges;

        return $this;
    }

    /**
     * Gets transaction_charges
     *
     * @return int
     */
    public function getTransactionCharges()
    {
        return $this->container['transaction_charges'];
    }

    /**
     * Sets transaction_charges
     *
     * @param int $transaction_charges 
     *
     * @return $this
     */
    public function setTransactionCharges($transaction_charges)
    {
        $this->container['transaction_charges'] = $transaction_charges;

        return $this;
    }

    /**
     * Gets total_discount
     *
     * @return int
     */
    public function getTotalDiscount()
    {
        return $this->container['total_discount'];
    }

    /**
     * Sets total_discount
     *
     * @param int $total_discount 
     *
     * @return $this
     */
    public function setTotalDiscount($total_discount)
    {
        $this->container['total_discount'] = $total_discount;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return int
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param int $sub_total 
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets length
     *
     * @return string
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param string $length 
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets breadth
     *
     * @return int
     */
    public function getBreadth()
    {
        return $this->container['breadth'];
    }

    /**
     * Sets breadth
     *
     * @param int $breadth 
     *
     * @return $this
     */
    public function setBreadth($breadth)
    {
        $this->container['breadth'] = $breadth;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height 
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight 
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


