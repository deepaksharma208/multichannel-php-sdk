<?php
/**
 * ChangeAddressRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ShiprocketAPI
 *
 * Welcome to ShipRocket’s API Documentation. Get a clear understanding of all the sections and codes that are used in ShipRocket’s API. ShipRocket API uses the JSON syntax.     First you need to register with ShipRocket and create an account. Simply click on this [link](https://app.shiprocket.in/register) to complete the simple sign up process.    Please note that to utilise the ShipRocket API's, you need to [upgrade](https://app.shiprocket.in/billing-plan-details) your plan to Advance or Pro. To get access to use the API's, you need to call to +91-9266623006 our customer care or send a mail to srs@kartrocket.com, stating that you would like to use ShipRocket Open API's. After that you will have to provide an alternate email id which will be used for the ShipRocket API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChangeAddressRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChangeAddressRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChangeAddressRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
        'shipping_customer_name' => 'string',
        'shipping_phone' => 'string',
        'shipping_address' => 'string',
        'shipping_address_2' => 'string',
        'shipping_city' => 'string',
        'shipping_state' => 'string',
        'shipping_country' => 'string',
        'shipping_pincode' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => 'int32',
        'shipping_customer_name' => null,
        'shipping_phone' => null,
        'shipping_address' => null,
        'shipping_address_2' => null,
        'shipping_city' => null,
        'shipping_state' => null,
        'shipping_country' => null,
        'shipping_pincode' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
        'shipping_customer_name' => 'shipping_customer_name',
        'shipping_phone' => 'shipping_phone',
        'shipping_address' => 'shipping_address',
        'shipping_address_2' => 'shipping_address_2',
        'shipping_city' => 'shipping_city',
        'shipping_state' => 'shipping_state',
        'shipping_country' => 'shipping_country',
        'shipping_pincode' => 'shipping_pincode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'shipping_customer_name' => 'setShippingCustomerName',
        'shipping_phone' => 'setShippingPhone',
        'shipping_address' => 'setShippingAddress',
        'shipping_address_2' => 'setShippingAddress2',
        'shipping_city' => 'setShippingCity',
        'shipping_state' => 'setShippingState',
        'shipping_country' => 'setShippingCountry',
        'shipping_pincode' => 'setShippingPincode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'shipping_customer_name' => 'getShippingCustomerName',
        'shipping_phone' => 'getShippingPhone',
        'shipping_address' => 'getShippingAddress',
        'shipping_address_2' => 'getShippingAddress2',
        'shipping_city' => 'getShippingCity',
        'shipping_state' => 'getShippingState',
        'shipping_country' => 'getShippingCountry',
        'shipping_pincode' => 'getShippingPincode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['shipping_customer_name'] = isset($data['shipping_customer_name']) ? $data['shipping_customer_name'] : null;
        $this->container['shipping_phone'] = isset($data['shipping_phone']) ? $data['shipping_phone'] : null;
        $this->container['shipping_address'] = isset($data['shipping_address']) ? $data['shipping_address'] : null;
        $this->container['shipping_address_2'] = isset($data['shipping_address_2']) ? $data['shipping_address_2'] : null;
        $this->container['shipping_city'] = isset($data['shipping_city']) ? $data['shipping_city'] : null;
        $this->container['shipping_state'] = isset($data['shipping_state']) ? $data['shipping_state'] : null;
        $this->container['shipping_country'] = isset($data['shipping_country']) ? $data['shipping_country'] : null;
        $this->container['shipping_pincode'] = isset($data['shipping_pincode']) ? $data['shipping_pincode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['shipping_customer_name'] === null) {
            $invalidProperties[] = "'shipping_customer_name' can't be null";
        }
        if ($this->container['shipping_phone'] === null) {
            $invalidProperties[] = "'shipping_phone' can't be null";
        }
        if ($this->container['shipping_address'] === null) {
            $invalidProperties[] = "'shipping_address' can't be null";
        }
        if ($this->container['shipping_address_2'] === null) {
            $invalidProperties[] = "'shipping_address_2' can't be null";
        }
        if ($this->container['shipping_city'] === null) {
            $invalidProperties[] = "'shipping_city' can't be null";
        }
        if ($this->container['shipping_state'] === null) {
            $invalidProperties[] = "'shipping_state' can't be null";
        }
        if ($this->container['shipping_country'] === null) {
            $invalidProperties[] = "'shipping_country' can't be null";
        }
        if ($this->container['shipping_pincode'] === null) {
            $invalidProperties[] = "'shipping_pincode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['order_id'] === null) {
            return false;
        }
        if ($this->container['shipping_customer_name'] === null) {
            return false;
        }
        if ($this->container['shipping_phone'] === null) {
            return false;
        }
        if ($this->container['shipping_address'] === null) {
            return false;
        }
        if ($this->container['shipping_address_2'] === null) {
            return false;
        }
        if ($this->container['shipping_city'] === null) {
            return false;
        }
        if ($this->container['shipping_state'] === null) {
            return false;
        }
        if ($this->container['shipping_country'] === null) {
            return false;
        }
        if ($this->container['shipping_pincode'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id Order of the customer whose address details need to be changed
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets shipping_customer_name
     *
     * @return string
     */
    public function getShippingCustomerName()
    {
        return $this->container['shipping_customer_name'];
    }

    /**
     * Sets shipping_customer_name
     *
     * @param string $shipping_customer_name The name of the customer whose details need to be changed
     *
     * @return $this
     */
    public function setShippingCustomerName($shipping_customer_name)
    {
        $this->container['shipping_customer_name'] = $shipping_customer_name;

        return $this;
    }

    /**
     * Gets shipping_phone
     *
     * @return string
     */
    public function getShippingPhone()
    {
        return $this->container['shipping_phone'];
    }

    /**
     * Sets shipping_phone
     *
     * @param string $shipping_phone The customer’s phone number
     *
     * @return $this
     */
    public function setShippingPhone($shipping_phone)
    {
        $this->container['shipping_phone'] = $shipping_phone;

        return $this;
    }

    /**
     * Gets shipping_address
     *
     * @return string
     */
    public function getShippingAddress()
    {
        return $this->container['shipping_address'];
    }

    /**
     * Sets shipping_address
     *
     * @param string $shipping_address 1st line of the address
     *
     * @return $this
     */
    public function setShippingAddress($shipping_address)
    {
        $this->container['shipping_address'] = $shipping_address;

        return $this;
    }

    /**
     * Gets shipping_address_2
     *
     * @return string
     */
    public function getShippingAddress2()
    {
        return $this->container['shipping_address_2'];
    }

    /**
     * Sets shipping_address_2
     *
     * @param string $shipping_address_2 2nd line of the address
     *
     * @return $this
     */
    public function setShippingAddress2($shipping_address_2)
    {
        $this->container['shipping_address_2'] = $shipping_address_2;

        return $this;
    }

    /**
     * Gets shipping_city
     *
     * @return string
     */
    public function getShippingCity()
    {
        return $this->container['shipping_city'];
    }

    /**
     * Sets shipping_city
     *
     * @param string $shipping_city The city where it is to be shipped
     *
     * @return $this
     */
    public function setShippingCity($shipping_city)
    {
        $this->container['shipping_city'] = $shipping_city;

        return $this;
    }

    /**
     * Gets shipping_state
     *
     * @return string
     */
    public function getShippingState()
    {
        return $this->container['shipping_state'];
    }

    /**
     * Sets shipping_state
     *
     * @param string $shipping_state The state where it is to be shipped
     *
     * @return $this
     */
    public function setShippingState($shipping_state)
    {
        $this->container['shipping_state'] = $shipping_state;

        return $this;
    }

    /**
     * Gets shipping_country
     *
     * @return string
     */
    public function getShippingCountry()
    {
        return $this->container['shipping_country'];
    }

    /**
     * Sets shipping_country
     *
     * @param string $shipping_country The country where it is to be shipped
     *
     * @return $this
     */
    public function setShippingCountry($shipping_country)
    {
        $this->container['shipping_country'] = $shipping_country;

        return $this;
    }

    /**
     * Gets shipping_pincode
     *
     * @return int
     */
    public function getShippingPincode()
    {
        return $this->container['shipping_pincode'];
    }

    /**
     * Sets shipping_pincode
     *
     * @param int $shipping_pincode The pincode of the customer
     *
     * @return $this
     */
    public function setShippingPincode($shipping_pincode)
    {
        $this->container['shipping_pincode'] = $shipping_pincode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


